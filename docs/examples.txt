Example code for OxCad designs.

K: notch demo
V:
// demo notch smoothness range
const edges = ox.callRange(6, ox.makeEdge, 0, 40);
const notches = ox.callRange(5, ox.makeNotch, 90, 20, 200, { first: 0, last: 1 });
const le = edges.interleave(notches);
svg.render(le.svgPath(10, 50));
log.print("done.");

K: reflect demo
V:
// example using reflect
const edges = ox.callRange(3, ox.makeEdge, { first: -20, last: 0 }, 200);
const notches = ox.callRange(2, ox.makeNotch, { first: 75, last: 85 }, 20, 100, 2 / 3);
const side = edges.interleave(notches);
const le = side.reflect(90);
svg.render(le.svgPath(10, 200));
log.print("edge length:", le.edgeLength());
const leEnd = le.end();
log.print("relative leading edge end:", leEnd.x, leEnd.y);
log.print("done.");

K: alfa
V:
// --- Alfa ---
// leading edge
const leEdges = ox.callRange(3, ox.makeEdge, { first: -20, last: 0 }, 180);
const leNotches = ox.callRange(2, ox.makeNotch, { first: 75, last: 85 }, 20, { first: 100, last: 140 }, 2 / 3);
const leSide = leEdges.interleave(leNotches);
const le = leSide.reflect(90);
// trailing edge
const teEdges = ox.callRange(2, ox.makeEdge, { first: 135, last: 180 }, 100);
const teNotches = ox.callRange(1, ox.makeNotch, 255, 30, 50, 2 / 3);
const teSide = teEdges.interleave(teNotches);
const te = teSide.reflect(90);
// scale trailing edge to match leading edge width
const factor = le.end().x / -te.end().x;
log.print("trailing edge scale factor:", factor);
const teScaled = te.scale(factor);
log.print(`le end: ${le.end().x},${le.end().y}`);
log.print(`te end: ${teScaled.end().x},${teScaled.end().y}`);
// draw canopy
const outline = le.concat(teScaled);
const xMid = 600
const xpos = xMid - le.end().x / 2; // center at major grid line
svg.render(outline.svgSurface(xpos, 110));
svg.render(ox.svgText(xMid-18, 200, 'Alfa', 20));
//svg.printPlans();
log.print("done.");

K: svg render
V:
// demo raw svg usage
svg.render('<circle id="yellowCircle1" style="stroke:blue;stroke-width:4;fill:yellow;" cx="170" cy="200" r="20"/>');
svg.render('<circle id="orangeCircle1" style="stroke:blue;stroke-width:4;fill:darkorange;" cx="230" cy="200" r="20"/>');
svg.render('<g transform="scale(5)"><path id="testPath" d="M10,10 l20,10 l-10,10" style="stroke: #0000cc; stroke-width: 2px; fill:#ccccff;"/></g>');
const curve = document.getElementById("testPath");
const len = curve.getTotalLength();
const pos = curve.getPointAtLength(len);
const bbox = curve.getBBox();
// note that properties ignores surrounding transform
log.print("path len", len, "end xy", pos.x, pos.y, "bbox:", bbox.x, bbox.y, bbox.x + bbox.width, bbox.y + bbox.height, bbox.style);

K: svg serialize
V:
const svgXml = (new XMLSerializer).serializeToString(svg.getContainer());
log.print(svgXml);

K: blank
V:
